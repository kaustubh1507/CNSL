#include <bits/stdc++.h>
using namespace std;
#define ull unsigned long long int
// Returns XOR of 'a' and 'b'
// (both of same length)
int convert(long long n) {
  int dec = 0, i = 0, rem;

  while (n!=0) {
    rem = n % 10;
    n /= 10;
    dec += rem * pow(2, i);
    ++i;
  }

  return dec;
}
int decimalToBinary(int N)
{
    // To store the binary number
    ull B_Number = 0;
    int cnt = 0;
    while (N != 0) {
        int rem = N % 2;
        ull c = pow(10, cnt);
        B_Number += rem * c;
        N /= 2;
        // Count used to store exponent value
        cnt++;
    }
    return B_Number;
}
string xor1(string a, string b)
{

// Initialize result
    string result = "";

    int n = b.length();

// Traverse all bits, if bits are
// same, then XOR is 0, else 1
    for (int i = 1; i < n; i++) {
        if (a[i] == b[i])
            result += "0";
        else
            result += "1";
    }
    return result;
}

// Performs Modulo-2 division
string mod2div(string dividend, string divisor)
{

// Number of bits to be XORed at a time.
    int pick = divisor.length();

// Slicing the dividend to appropriate
// length for particular step
    string tmp = dividend.substr(0, pick);

    int n = dividend.length();

    while (pick < n) {
        if (tmp[0] == '1')

// Replace the dividend by the result
// of XOR and pull 1 bit down
            tmp = xor1(divisor, tmp) + dividend[pick];
        else

// If leftmost bit is '0'.
// If the leftmost bit of the dividend (or the
// part used in each step) is 0, the step cannot
// use the regular divisor; we need to use an
// all-0s divisor.
            tmp = xor1(std::string(pick, '0'), tmp)+ dividend[pick];

// Increment pick to move further
            pick += 1;
    }

// For the last n bits, we have to carry it out
// normally as increased value of pick will cause
// Index Out of Bounds.
    if (tmp[0] == '1')
        tmp = xor1(divisor, tmp);
    else
        tmp = xor1(std::string(pick, '0'), tmp);

    return tmp;
}

// Function used at the sender side to encode
// data by appending remainder of modular division
// at the end of data.
void encodeData(string data, string key)
{
    cout<<"\n"<<data;
    int l_key = key.length();

// Appends n-1 zeroes at end of data
    string appended_data= (data + std::string(l_key - 1, '0'));
    cout<<"\n"<<appended_data;
    string remainder = mod2div(appended_data, key);

// Append remainder in the original data
    string codeword = data + remainder;
    cout << "\nRemainder : " << remainder << "\n";
    cout << "Encoded Data (Data + Remainder) :" << codeword<< "\n";
}
// checking if the message received by receiver is correct
// or not. If the remainder is all 0 then it is correct,
// else wrong.
void receiver(string data, string key)
{
    
    string currxor= mod2div(data.substr(0, key.size()), key);
    int curr = key.size();
    while (curr != data.size()) {
        if (currxor.size() != key.size()) {
            currxor.push_back(data[curr++]);
        }
        else {
            currxor = mod2div(currxor, key);
        }
    }
    if (currxor.size() == key.size()) {
        currxor = mod2div(currxor, key);
    }
    if (currxor.find('1') != string::npos) {
        cout << "there is some error in data" << endl;
    }   
    else {
        cout << "correct message received" << endl;
        cout<<data;
        data.erase(data.length()-3,3);
        int d2=stoi(data);
        int val=convert(d2);
        cout<<"Ascii val : "<<val;
        char c= (char)val;
        cout<<"\n"<<c;
    }
}
// Driver code
int main()
{
    string ip="";
    cout<<"\nEnter input : ";
    cin>>ip;
    for(int i=0;i<ip.length();i++){
        int c=int(ip[i]);
        cout<<"\n"<<ip[i]<<"\t"<<c;
        int x=decimalToBinary(c);
        string data = to_string(x);
        string key = "1101";
        cout << "Sender side..." << endl;
        encodeData(data, key);
        cout << "\nReceiver side..." << endl;
        receiver(data+mod2div(data+std::string(key.size() - 1, '0'),key), key);
    }

    return 0;
}
